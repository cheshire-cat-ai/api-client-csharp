/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CheshireCatApi.Client;
using CheshireCatApi.Api;
// uncomment below to import models
//using CheshireCatApi.Model;

namespace CheshireCatApi.Test.Api
{
    /// <summary>
    ///  Class for testing MemoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MemoryApiTests : IDisposable
    {
        private MemoryApi instance;

        public MemoryApiTests()
        {
            instance = new MemoryApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MemoryApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MemoryApi
            //Assert.IsType<MemoryApi>(instance);
        }

        /// <summary>
        /// Test DeletePointInMemory
        /// </summary>
        [Fact]
        public void DeletePointInMemoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId = null;
            //string memoryId = null;
            //var response = instance.DeletePointInMemory(collectionId, memoryId);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test GetCollections
        /// </summary>
        [Fact]
        public void GetCollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCollections();
            //Assert.IsType<CollectionsList>(response);
        }

        /// <summary>
        /// Test GetConversationHistory
        /// </summary>
        [Fact]
        public void GetConversationHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConversationHistory();
            //Assert.IsType<ConversationHistory>(response);
        }

        /// <summary>
        /// Test RecallMemoriesFromText
        /// </summary>
        [Fact]
        public void RecallMemoriesFromTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //int? k = null;
            //var response = instance.RecallMemoriesFromText(text, k);
            //Assert.IsType<MemoryRecall>(response);
        }

        /// <summary>
        /// Test WipeCollections
        /// </summary>
        [Fact]
        public void WipeCollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WipeCollections();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test WipeConversationHistory
        /// </summary>
        [Fact]
        public void WipeConversationHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WipeConversationHistory();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test WipeMemoryPoints
        /// </summary>
        [Fact]
        public void WipeMemoryPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId = null;
            //Object? body = null;
            //var response = instance.WipeMemoryPoints(collectionId, body);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test WipeSingleCollection
        /// </summary>
        [Fact]
        public void WipeSingleCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId = null;
            //var response = instance.WipeSingleCollection(collectionId);
            //Assert.IsType<List<string>>(response);
        }
    }
}
