/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CheshireCatApi.Client.OpenAPIDateConverter;

namespace CheshireCatApi.Model
{
    /// <summary>
    /// ConversationMessage
    /// </summary>
    [DataContract(Name = "ConversationMessage")]
    public partial class ConversationMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConversationMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationMessage" /> class.
        /// </summary>
        /// <param name="who">who (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="why">why.</param>
        public ConversationMessage(string who = default(string), string message = default(string), Object why = default(Object))
        {
            // to ensure "who" is required (not null)
            if (who == null)
            {
                throw new ArgumentNullException("who is a required property for ConversationMessage and cannot be null");
            }
            this.Who = who;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ConversationMessage and cannot be null");
            }
            this.Message = message;
            this.Why = why;
        }

        /// <summary>
        /// Gets or Sets Who
        /// </summary>
        [DataMember(Name = "who", IsRequired = true, EmitDefaultValue = true)]
        public string Who { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Why
        /// </summary>
        [DataMember(Name = "why", EmitDefaultValue = false)]
        public Object Why { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversationMessage {\n");
            sb.Append("  Who: ").Append(Who).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Why: ").Append(Why).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
