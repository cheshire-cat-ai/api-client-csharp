/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CheshireCatApi.Client.OpenAPIDateConverter;

namespace CheshireCatApi.Model
{
    /// <summary>
    /// PluginsList
    /// </summary>
    [DataContract(Name = "PluginsList")]
    public partial class PluginsList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PluginsList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsList" /> class.
        /// </summary>
        /// <param name="filters">filters (required).</param>
        /// <param name="installed">installed (required).</param>
        /// <param name="registry">registry (required).</param>
        public PluginsList(Filters filters = default(Filters), List<Plugin> installed = default(List<Plugin>), List<Plugin> registry = default(List<Plugin>))
        {
            // to ensure "filters" is required (not null)
            if (filters == null)
            {
                throw new ArgumentNullException("filters is a required property for PluginsList and cannot be null");
            }
            this.Filters = filters;
            // to ensure "installed" is required (not null)
            if (installed == null)
            {
                throw new ArgumentNullException("installed is a required property for PluginsList and cannot be null");
            }
            this.Installed = installed;
            // to ensure "registry" is required (not null)
            if (registry == null)
            {
                throw new ArgumentNullException("registry is a required property for PluginsList and cannot be null");
            }
            this.Registry = registry;
        }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", IsRequired = true, EmitDefaultValue = true)]
        public Filters Filters { get; set; }

        /// <summary>
        /// Gets or Sets Installed
        /// </summary>
        [DataMember(Name = "installed", IsRequired = true, EmitDefaultValue = true)]
        public List<Plugin> Installed { get; set; }

        /// <summary>
        /// Gets or Sets Registry
        /// </summary>
        [DataMember(Name = "registry", IsRequired = true, EmitDefaultValue = true)]
        public List<Plugin> Registry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PluginsList {\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Installed: ").Append(Installed).Append("\n");
            sb.Append("  Registry: ").Append(Registry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
