/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CheshireCatApi.Client;
using CheshireCatApi.Model;

namespace CheshireCatApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Point In Memory
        /// </summary>
        /// <remarks>
        /// Delete specific point in memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DeletePointInMemory(string collectionId, string memoryId, int operationIndex = 0);

        /// <summary>
        /// Delete Point In Memory
        /// </summary>
        /// <remarks>
        /// Delete specific point in memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DeletePointInMemoryWithHttpInfo(string collectionId, string memoryId, int operationIndex = 0);
        /// <summary>
        /// Get Collections
        /// </summary>
        /// <remarks>
        /// Get list of available collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionsList</returns>
        CollectionsList GetCollections(int operationIndex = 0);

        /// <summary>
        /// Get Collections
        /// </summary>
        /// <remarks>
        /// Get list of available collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionsList</returns>
        ApiResponse<CollectionsList> GetCollectionsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Conversation History
        /// </summary>
        /// <remarks>
        /// Get the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConversationHistory</returns>
        ConversationHistory GetConversationHistory(int operationIndex = 0);

        /// <summary>
        /// Get Conversation History
        /// </summary>
        /// <remarks>
        /// Get the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConversationHistory</returns>
        ApiResponse<ConversationHistory> GetConversationHistoryWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Recall Memories From Text
        /// </summary>
        /// <remarks>
        /// Search k memories similar to given text.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryRecall</returns>
        MemoryRecall RecallMemoriesFromText(string text, int? k = default(int?), int operationIndex = 0);

        /// <summary>
        /// Recall Memories From Text
        /// </summary>
        /// <remarks>
        /// Search k memories similar to given text.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryRecall</returns>
        ApiResponse<MemoryRecall> RecallMemoriesFromTextWithHttpInfo(string text, int? k = default(int?), int operationIndex = 0);
        /// <summary>
        /// Wipe Collections
        /// </summary>
        /// <remarks>
        /// Delete and create all collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> WipeCollections(int operationIndex = 0);

        /// <summary>
        /// Wipe Collections
        /// </summary>
        /// <remarks>
        /// Delete and create all collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> WipeCollectionsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Wipe Conversation History
        /// </summary>
        /// <remarks>
        /// Delete the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> WipeConversationHistory(int operationIndex = 0);

        /// <summary>
        /// Wipe Conversation History
        /// </summary>
        /// <remarks>
        /// Delete the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> WipeConversationHistoryWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Wipe Memory Points By Metadata
        /// </summary>
        /// <remarks>
        /// Delete points in memory by filter
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> WipeMemoryPoints(string collectionId, Object? body = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Wipe Memory Points By Metadata
        /// </summary>
        /// <remarks>
        /// Delete points in memory by filter
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> WipeMemoryPointsWithHttpInfo(string collectionId, Object? body = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Wipe Single Collection
        /// </summary>
        /// <remarks>
        /// Delete and recreate a collection
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> WipeSingleCollection(string collectionId, int operationIndex = 0);

        /// <summary>
        /// Wipe Single Collection
        /// </summary>
        /// <remarks>
        /// Delete and recreate a collection
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> WipeSingleCollectionWithHttpInfo(string collectionId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Point In Memory
        /// </summary>
        /// <remarks>
        /// Delete specific point in memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DeletePointInMemoryAsync(string collectionId, string memoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Point In Memory
        /// </summary>
        /// <remarks>
        /// Delete specific point in memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DeletePointInMemoryWithHttpInfoAsync(string collectionId, string memoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collections
        /// </summary>
        /// <remarks>
        /// Get list of available collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionsList</returns>
        System.Threading.Tasks.Task<CollectionsList> GetCollectionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collections
        /// </summary>
        /// <remarks>
        /// Get list of available collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionsList>> GetCollectionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Conversation History
        /// </summary>
        /// <remarks>
        /// Get the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConversationHistory</returns>
        System.Threading.Tasks.Task<ConversationHistory> GetConversationHistoryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Conversation History
        /// </summary>
        /// <remarks>
        /// Get the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConversationHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConversationHistory>> GetConversationHistoryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recall Memories From Text
        /// </summary>
        /// <remarks>
        /// Search k memories similar to given text.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryRecall</returns>
        System.Threading.Tasks.Task<MemoryRecall> RecallMemoriesFromTextAsync(string text, int? k = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recall Memories From Text
        /// </summary>
        /// <remarks>
        /// Search k memories similar to given text.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryRecall)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryRecall>> RecallMemoriesFromTextWithHttpInfoAsync(string text, int? k = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wipe Collections
        /// </summary>
        /// <remarks>
        /// Delete and create all collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> WipeCollectionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wipe Collections
        /// </summary>
        /// <remarks>
        /// Delete and create all collections
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> WipeCollectionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wipe Conversation History
        /// </summary>
        /// <remarks>
        /// Delete the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> WipeConversationHistoryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wipe Conversation History
        /// </summary>
        /// <remarks>
        /// Delete the specified user&#39;s conversation history from working memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> WipeConversationHistoryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wipe Memory Points By Metadata
        /// </summary>
        /// <remarks>
        /// Delete points in memory by filter
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> WipeMemoryPointsAsync(string collectionId, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wipe Memory Points By Metadata
        /// </summary>
        /// <remarks>
        /// Delete points in memory by filter
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> WipeMemoryPointsWithHttpInfoAsync(string collectionId, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wipe Single Collection
        /// </summary>
        /// <remarks>
        /// Delete and recreate a collection
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> WipeSingleCollectionAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wipe Single Collection
        /// </summary>
        /// <remarks>
        /// Delete and recreate a collection
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> WipeSingleCollectionWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemoryApi : IMemoryApiSync, IMemoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MemoryApi : IMemoryApi
    {
        private CheshireCatApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoryApi(string basePath)
        {
            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                new CheshireCatApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MemoryApi(CheshireCatApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MemoryApi(CheshireCatApi.Client.ISynchronousClient client, CheshireCatApi.Client.IAsynchronousClient asyncClient, CheshireCatApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CheshireCatApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CheshireCatApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CheshireCatApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CheshireCatApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Point In Memory Delete specific point in memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DeletePointInMemory(string collectionId, string memoryId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = DeletePointInMemoryWithHttpInfo(collectionId, memoryId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Point In Memory Delete specific point in memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CheshireCatApi.Client.ApiResponse<List<string>> DeletePointInMemoryWithHttpInfo(string collectionId, string memoryId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'collectionId' when calling MemoryApi->DeletePointInMemory");
            }

            // verify the required parameter 'memoryId' is set
            if (memoryId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'memoryId' when calling MemoryApi->DeletePointInMemory");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", CheshireCatApi.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memory_id", CheshireCatApi.Client.ClientUtils.ParameterToString(memoryId)); // path parameter

            localVarRequestOptions.Operation = "MemoryApi.DeletePointInMemory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/memory/collections/{collection_id}/points/{memory_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePointInMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Point In Memory Delete specific point in memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DeletePointInMemoryAsync(string collectionId, string memoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = await DeletePointInMemoryWithHttpInfoAsync(collectionId, memoryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Point In Memory Delete specific point in memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="memoryId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<List<string>>> DeletePointInMemoryWithHttpInfoAsync(string collectionId, string memoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'collectionId' when calling MemoryApi->DeletePointInMemory");
            }

            // verify the required parameter 'memoryId' is set
            if (memoryId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'memoryId' when calling MemoryApi->DeletePointInMemory");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", CheshireCatApi.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memory_id", CheshireCatApi.Client.ClientUtils.ParameterToString(memoryId)); // path parameter

            localVarRequestOptions.Operation = "MemoryApi.DeletePointInMemory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/memory/collections/{collection_id}/points/{memory_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePointInMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collections Get list of available collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionsList</returns>
        public CollectionsList GetCollections(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<CollectionsList> localVarResponse = GetCollectionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collections Get list of available collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionsList</returns>
        public CheshireCatApi.Client.ApiResponse<CollectionsList> GetCollectionsWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.GetCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionsList>("/memory/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collections Get list of available collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionsList</returns>
        public async System.Threading.Tasks.Task<CollectionsList> GetCollectionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<CollectionsList> localVarResponse = await GetCollectionsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collections Get list of available collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionsList)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<CollectionsList>> GetCollectionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.GetCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionsList>("/memory/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conversation History Get the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConversationHistory</returns>
        public ConversationHistory GetConversationHistory(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<ConversationHistory> localVarResponse = GetConversationHistoryWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conversation History Get the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConversationHistory</returns>
        public CheshireCatApi.Client.ApiResponse<ConversationHistory> GetConversationHistoryWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.GetConversationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConversationHistory>("/memory/conversation_history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConversationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conversation History Get the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConversationHistory</returns>
        public async System.Threading.Tasks.Task<ConversationHistory> GetConversationHistoryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<ConversationHistory> localVarResponse = await GetConversationHistoryWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conversation History Get the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConversationHistory)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<ConversationHistory>> GetConversationHistoryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.GetConversationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConversationHistory>("/memory/conversation_history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConversationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recall Memories From Text Search k memories similar to given text.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryRecall</returns>
        public MemoryRecall RecallMemoriesFromText(string text, int? k = default(int?), int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<MemoryRecall> localVarResponse = RecallMemoriesFromTextWithHttpInfo(text, k);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recall Memories From Text Search k memories similar to given text.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryRecall</returns>
        public CheshireCatApi.Client.ApiResponse<MemoryRecall> RecallMemoriesFromTextWithHttpInfo(string text, int? k = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'text' when calling MemoryApi->RecallMemoriesFromText");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            if (k != null)
            {
                localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "k", k));
            }

            localVarRequestOptions.Operation = "MemoryApi.RecallMemoriesFromText";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MemoryRecall>("/memory/recall", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecallMemoriesFromText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recall Memories From Text Search k memories similar to given text.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryRecall</returns>
        public async System.Threading.Tasks.Task<MemoryRecall> RecallMemoriesFromTextAsync(string text, int? k = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<MemoryRecall> localVarResponse = await RecallMemoriesFromTextWithHttpInfoAsync(text, k, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recall Memories From Text Search k memories similar to given text.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Find memories similar to this text.</param>
        /// <param name="k">How many memories to return. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryRecall)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<MemoryRecall>> RecallMemoriesFromTextWithHttpInfoAsync(string text, int? k = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'text' when calling MemoryApi->RecallMemoriesFromText");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            if (k != null)
            {
                localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "k", k));
            }

            localVarRequestOptions.Operation = "MemoryApi.RecallMemoriesFromText";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemoryRecall>("/memory/recall", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecallMemoriesFromText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Collections Delete and create all collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> WipeCollections(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = WipeCollectionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Collections Delete and create all collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CheshireCatApi.Client.ApiResponse<List<string>> WipeCollectionsWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.WipeCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/memory/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Collections Delete and create all collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> WipeCollectionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = await WipeCollectionsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Collections Delete and create all collections
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<List<string>>> WipeCollectionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.WipeCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/memory/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Conversation History Delete the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> WipeConversationHistory(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = WipeConversationHistoryWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Conversation History Delete the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CheshireCatApi.Client.ApiResponse<List<string>> WipeConversationHistoryWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.WipeConversationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/memory/conversation_history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeConversationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Conversation History Delete the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> WipeConversationHistoryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = await WipeConversationHistoryWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Conversation History Delete the specified user&#39;s conversation history from working memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<List<string>>> WipeConversationHistoryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MemoryApi.WipeConversationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/memory/conversation_history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeConversationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Memory Points By Metadata Delete points in memory by filter
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> WipeMemoryPoints(string collectionId, Object? body = default(Object?), int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = WipeMemoryPointsWithHttpInfo(collectionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Memory Points By Metadata Delete points in memory by filter
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CheshireCatApi.Client.ApiResponse<List<string>> WipeMemoryPointsWithHttpInfo(string collectionId, Object? body = default(Object?), int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'collectionId' when calling MemoryApi->WipeMemoryPoints");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", CheshireCatApi.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoryApi.WipeMemoryPoints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/memory/collections/{collection_id}/points", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeMemoryPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Memory Points By Metadata Delete points in memory by filter
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> WipeMemoryPointsAsync(string collectionId, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = await WipeMemoryPointsWithHttpInfoAsync(collectionId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Memory Points By Metadata Delete points in memory by filter
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<List<string>>> WipeMemoryPointsWithHttpInfoAsync(string collectionId, Object? body = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'collectionId' when calling MemoryApi->WipeMemoryPoints");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", CheshireCatApi.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MemoryApi.WipeMemoryPoints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/memory/collections/{collection_id}/points", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeMemoryPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Single Collection Delete and recreate a collection
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> WipeSingleCollection(string collectionId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = WipeSingleCollectionWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Single Collection Delete and recreate a collection
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CheshireCatApi.Client.ApiResponse<List<string>> WipeSingleCollectionWithHttpInfo(string collectionId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'collectionId' when calling MemoryApi->WipeSingleCollection");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", CheshireCatApi.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "MemoryApi.WipeSingleCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/memory/collections/{collection_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeSingleCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wipe Single Collection Delete and recreate a collection
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> WipeSingleCollectionAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = await WipeSingleCollectionWithHttpInfoAsync(collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wipe Single Collection Delete and recreate a collection
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<List<string>>> WipeSingleCollectionWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'collectionId' when calling MemoryApi->WipeSingleCollection");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", CheshireCatApi.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "MemoryApi.WipeSingleCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/memory/collections/{collection_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WipeSingleCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
