/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CheshireCatApi.Client;
using CheshireCatApi.Model;

namespace CheshireCatApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Plugin
        /// </summary>
        /// <remarks>
        /// Physically remove a plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DeletePlugin(string pluginId, int operationIndex = 0);

        /// <summary>
        /// Delete Plugin
        /// </summary>
        /// <remarks>
        /// Physically remove a plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DeletePluginWithHttpInfo(string pluginId, int operationIndex = 0);
        /// <summary>
        /// Get Plugin Details
        /// </summary>
        /// <remarks>
        /// Returns information on a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plugin</returns>
        Plugin GetPluginDetails(string pluginId, int operationIndex = 0);

        /// <summary>
        /// Get Plugin Details
        /// </summary>
        /// <remarks>
        /// Returns information on a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plugin</returns>
        ApiResponse<Plugin> GetPluginDetailsWithHttpInfo(string pluginId, int operationIndex = 0);
        /// <summary>
        /// Get Plugin Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPluginSettings200Response</returns>
        GetPluginSettings200Response GetPluginSettings(string pluginId, int operationIndex = 0);

        /// <summary>
        /// Get Plugin Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPluginSettings200Response</returns>
        ApiResponse<GetPluginSettings200Response> GetPluginSettingsWithHttpInfo(string pluginId, int operationIndex = 0);
        /// <summary>
        /// Get Plugins Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of all the plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse GetPluginsSettings(int operationIndex = 0);

        /// <summary>
        /// Get Plugins Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of all the plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> GetPluginsSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Install Plugin
        /// </summary>
        /// <remarks>
        /// Install a new plugin from a zip file
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        FileResponse InstallPlugin(System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Install Plugin
        /// </summary>
        /// <remarks>
        /// Install a new plugin from a zip file
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        ApiResponse<FileResponse> InstallPluginWithHttpInfo(System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Install Plugin From Registry
        /// </summary>
        /// <remarks>
        /// Install a new plugin from external repository
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        FileResponse InstallPluginFromRegistry(BodyUploadUrl bodyUploadUrl, int operationIndex = 0);

        /// <summary>
        /// Install Plugin From Registry
        /// </summary>
        /// <remarks>
        /// Install a new plugin from external repository
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        ApiResponse<FileResponse> InstallPluginFromRegistryWithHttpInfo(BodyUploadUrl bodyUploadUrl, int operationIndex = 0);
        /// <summary>
        /// List Available Plugins
        /// </summary>
        /// <remarks>
        /// List both installed and registry plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluginsList</returns>
        PluginsList ListAvailablePlugins(string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Available Plugins
        /// </summary>
        /// <remarks>
        /// List both installed and registry plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluginsList</returns>
        ApiResponse<PluginsList> ListAvailablePluginsWithHttpInfo(string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Toggle Plugin
        /// </summary>
        /// <remarks>
        /// Enable or disable a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToggleResponse</returns>
        ToggleResponse TogglePlugin(string pluginId, int operationIndex = 0);

        /// <summary>
        /// Toggle Plugin
        /// </summary>
        /// <remarks>
        /// Enable or disable a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToggleResponse</returns>
        ApiResponse<ToggleResponse> TogglePluginWithHttpInfo(string pluginId, int operationIndex = 0);
        /// <summary>
        /// Upsert Plugin Settings
        /// </summary>
        /// <remarks>
        /// Updates the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        Setting UpsertPluginSettings(string pluginId, Object body, int operationIndex = 0);

        /// <summary>
        /// Upsert Plugin Settings
        /// </summary>
        /// <remarks>
        /// Updates the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        ApiResponse<Setting> UpsertPluginSettingsWithHttpInfo(string pluginId, Object body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Plugin
        /// </summary>
        /// <remarks>
        /// Physically remove a plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DeletePluginAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Plugin
        /// </summary>
        /// <remarks>
        /// Physically remove a plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DeletePluginWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Plugin Details
        /// </summary>
        /// <remarks>
        /// Returns information on a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plugin</returns>
        System.Threading.Tasks.Task<Plugin> GetPluginDetailsAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Plugin Details
        /// </summary>
        /// <remarks>
        /// Returns information on a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plugin>> GetPluginDetailsWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Plugin Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPluginSettings200Response</returns>
        System.Threading.Tasks.Task<GetPluginSettings200Response> GetPluginSettingsAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Plugin Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPluginSettings200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPluginSettings200Response>> GetPluginSettingsWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Plugins Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of all the plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> GetPluginsSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Plugins Settings
        /// </summary>
        /// <remarks>
        /// Returns the settings of all the plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> GetPluginsSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Install Plugin
        /// </summary>
        /// <remarks>
        /// Install a new plugin from a zip file
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        System.Threading.Tasks.Task<FileResponse> InstallPluginAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Install Plugin
        /// </summary>
        /// <remarks>
        /// Install a new plugin from a zip file
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponse>> InstallPluginWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Install Plugin From Registry
        /// </summary>
        /// <remarks>
        /// Install a new plugin from external repository
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        System.Threading.Tasks.Task<FileResponse> InstallPluginFromRegistryAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Install Plugin From Registry
        /// </summary>
        /// <remarks>
        /// Install a new plugin from external repository
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponse>> InstallPluginFromRegistryWithHttpInfoAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Available Plugins
        /// </summary>
        /// <remarks>
        /// List both installed and registry plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginsList</returns>
        System.Threading.Tasks.Task<PluginsList> ListAvailablePluginsAsync(string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Available Plugins
        /// </summary>
        /// <remarks>
        /// List both installed and registry plugins
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluginsList>> ListAvailablePluginsWithHttpInfoAsync(string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Toggle Plugin
        /// </summary>
        /// <remarks>
        /// Enable or disable a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToggleResponse</returns>
        System.Threading.Tasks.Task<ToggleResponse> TogglePluginAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Toggle Plugin
        /// </summary>
        /// <remarks>
        /// Enable or disable a single plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToggleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToggleResponse>> TogglePluginWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upsert Plugin Settings
        /// </summary>
        /// <remarks>
        /// Updates the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> UpsertPluginSettingsAsync(string pluginId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upsert Plugin Settings
        /// </summary>
        /// <remarks>
        /// Updates the settings of a specific plugin
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> UpsertPluginSettingsWithHttpInfoAsync(string pluginId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApi : IPluginsApiSync, IPluginsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PluginsApi : IPluginsApi
    {
        private CheshireCatApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi(string basePath)
        {
            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                new CheshireCatApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PluginsApi(CheshireCatApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PluginsApi(CheshireCatApi.Client.ISynchronousClient client, CheshireCatApi.Client.IAsynchronousClient asyncClient, CheshireCatApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CheshireCatApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CheshireCatApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CheshireCatApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CheshireCatApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Plugin Physically remove a plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DeletePlugin(string pluginId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = DeletePluginWithHttpInfo(pluginId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Plugin Physically remove a plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public CheshireCatApi.Client.ApiResponse<List<string>> DeletePluginWithHttpInfo(string pluginId, int operationIndex = 0)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->DeletePlugin");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.DeletePlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/plugins/{plugin_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Plugin Physically remove a plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DeletePluginAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<List<string>> localVarResponse = await DeletePluginWithHttpInfoAsync(pluginId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Plugin Physically remove a plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<List<string>>> DeletePluginWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->DeletePlugin");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.DeletePlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/plugins/{plugin_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Plugin Details Returns information on a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plugin</returns>
        public Plugin GetPluginDetails(string pluginId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Plugin> localVarResponse = GetPluginDetailsWithHttpInfo(pluginId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Plugin Details Returns information on a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plugin</returns>
        public CheshireCatApi.Client.ApiResponse<Plugin> GetPluginDetailsWithHttpInfo(string pluginId, int operationIndex = 0)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginDetails");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.GetPluginDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Plugin>("/plugins/{plugin_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPluginDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Plugin Details Returns information on a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plugin</returns>
        public async System.Threading.Tasks.Task<Plugin> GetPluginDetailsAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Plugin> localVarResponse = await GetPluginDetailsWithHttpInfoAsync(pluginId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Plugin Details Returns information on a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Plugin>> GetPluginDetailsWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginDetails");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.GetPluginDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Plugin>("/plugins/{plugin_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPluginDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Plugin Settings Returns the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPluginSettings200Response</returns>
        public GetPluginSettings200Response GetPluginSettings(string pluginId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<GetPluginSettings200Response> localVarResponse = GetPluginSettingsWithHttpInfo(pluginId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Plugin Settings Returns the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPluginSettings200Response</returns>
        public CheshireCatApi.Client.ApiResponse<GetPluginSettings200Response> GetPluginSettingsWithHttpInfo(string pluginId, int operationIndex = 0)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginSettings");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.GetPluginSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPluginSettings200Response>("/plugins/settings/{plugin_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPluginSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Plugin Settings Returns the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPluginSettings200Response</returns>
        public async System.Threading.Tasks.Task<GetPluginSettings200Response> GetPluginSettingsAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<GetPluginSettings200Response> localVarResponse = await GetPluginSettingsWithHttpInfoAsync(pluginId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Plugin Settings Returns the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPluginSettings200Response)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<GetPluginSettings200Response>> GetPluginSettingsWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->GetPluginSettings");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.GetPluginSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPluginSettings200Response>("/plugins/settings/{plugin_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPluginSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Plugins Settings Returns the settings of all the plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse GetPluginsSettings(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<SettingsResponse> localVarResponse = GetPluginsSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Plugins Settings Returns the settings of all the plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public CheshireCatApi.Client.ApiResponse<SettingsResponse> GetPluginsSettingsWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PluginsApi.GetPluginsSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SettingsResponse>("/plugins/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPluginsSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Plugins Settings Returns the settings of all the plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> GetPluginsSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<SettingsResponse> localVarResponse = await GetPluginsSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Plugins Settings Returns the settings of all the plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<SettingsResponse>> GetPluginsSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PluginsApi.GetPluginsSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SettingsResponse>("/plugins/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPluginsSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install Plugin Install a new plugin from a zip file
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        public FileResponse InstallPlugin(System.IO.Stream file, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<FileResponse> localVarResponse = InstallPluginWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install Plugin Install a new plugin from a zip file
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        public CheshireCatApi.Client.ApiResponse<FileResponse> InstallPluginWithHttpInfo(System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'file' when calling PluginsApi->InstallPlugin");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "PluginsApi.InstallPlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FileResponse>("/plugins/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallPlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install Plugin Install a new plugin from a zip file
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        public async System.Threading.Tasks.Task<FileResponse> InstallPluginAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<FileResponse> localVarResponse = await InstallPluginWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install Plugin Install a new plugin from a zip file
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<FileResponse>> InstallPluginWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'file' when calling PluginsApi->InstallPlugin");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "PluginsApi.InstallPlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileResponse>("/plugins/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallPlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install Plugin From Registry Install a new plugin from external repository
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        public FileResponse InstallPluginFromRegistry(BodyUploadUrl bodyUploadUrl, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<FileResponse> localVarResponse = InstallPluginFromRegistryWithHttpInfo(bodyUploadUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install Plugin From Registry Install a new plugin from external repository
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        public CheshireCatApi.Client.ApiResponse<FileResponse> InstallPluginFromRegistryWithHttpInfo(BodyUploadUrl bodyUploadUrl, int operationIndex = 0)
        {
            // verify the required parameter 'bodyUploadUrl' is set
            if (bodyUploadUrl == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'bodyUploadUrl' when calling PluginsApi->InstallPluginFromRegistry");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyUploadUrl;

            localVarRequestOptions.Operation = "PluginsApi.InstallPluginFromRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FileResponse>("/plugins/upload/registry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallPluginFromRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install Plugin From Registry Install a new plugin from external repository
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        public async System.Threading.Tasks.Task<FileResponse> InstallPluginFromRegistryAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<FileResponse> localVarResponse = await InstallPluginFromRegistryWithHttpInfoAsync(bodyUploadUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install Plugin From Registry Install a new plugin from external repository
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<FileResponse>> InstallPluginFromRegistryWithHttpInfoAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyUploadUrl' is set
            if (bodyUploadUrl == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'bodyUploadUrl' when calling PluginsApi->InstallPluginFromRegistry");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyUploadUrl;

            localVarRequestOptions.Operation = "PluginsApi.InstallPluginFromRegistry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileResponse>("/plugins/upload/registry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallPluginFromRegistry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Available Plugins List both installed and registry plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluginsList</returns>
        public PluginsList ListAvailablePlugins(string? query = default(string?), int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<PluginsList> localVarResponse = ListAvailablePluginsWithHttpInfo(query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Available Plugins List both installed and registry plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluginsList</returns>
        public CheshireCatApi.Client.ApiResponse<PluginsList> ListAvailablePluginsWithHttpInfo(string? query = default(string?), int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "PluginsApi.ListAvailablePlugins";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PluginsList>("/plugins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailablePlugins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Available Plugins List both installed and registry plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginsList</returns>
        public async System.Threading.Tasks.Task<PluginsList> ListAvailablePluginsAsync(string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<PluginsList> localVarResponse = await ListAvailablePluginsWithHttpInfoAsync(query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Available Plugins List both installed and registry plugins
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginsList)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<PluginsList>> ListAvailablePluginsWithHttpInfoAsync(string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "PluginsApi.ListAvailablePlugins";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PluginsList>("/plugins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailablePlugins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle Plugin Enable or disable a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToggleResponse</returns>
        public ToggleResponse TogglePlugin(string pluginId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<ToggleResponse> localVarResponse = TogglePluginWithHttpInfo(pluginId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle Plugin Enable or disable a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToggleResponse</returns>
        public CheshireCatApi.Client.ApiResponse<ToggleResponse> TogglePluginWithHttpInfo(string pluginId, int operationIndex = 0)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->TogglePlugin");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.TogglePlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ToggleResponse>("/plugins/toggle/{plugin_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TogglePlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle Plugin Enable or disable a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToggleResponse</returns>
        public async System.Threading.Tasks.Task<ToggleResponse> TogglePluginAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<ToggleResponse> localVarResponse = await TogglePluginWithHttpInfoAsync(pluginId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle Plugin Enable or disable a single plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToggleResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<ToggleResponse>> TogglePluginWithHttpInfoAsync(string pluginId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->TogglePlugin");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter

            localVarRequestOptions.Operation = "PluginsApi.TogglePlugin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ToggleResponse>("/plugins/toggle/{plugin_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TogglePlugin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert Plugin Settings Updates the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        public Setting UpsertPluginSettings(string pluginId, Object body, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = UpsertPluginSettingsWithHttpInfo(pluginId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert Plugin Settings Updates the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        public CheshireCatApi.Client.ApiResponse<Setting> UpsertPluginSettingsWithHttpInfo(string pluginId, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UpsertPluginSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'body' when calling PluginsApi->UpsertPluginSettings");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PluginsApi.UpsertPluginSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Setting>("/plugins/settings/{plugin_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertPluginSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert Plugin Settings Updates the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> UpsertPluginSettingsAsync(string pluginId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = await UpsertPluginSettingsWithHttpInfoAsync(pluginId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert Plugin Settings Updates the settings of a specific plugin
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Setting>> UpsertPluginSettingsWithHttpInfoAsync(string pluginId, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->UpsertPluginSettings");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'body' when calling PluginsApi->UpsertPluginSettings");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plugin_id", CheshireCatApi.Client.ClientUtils.ParameterToString(pluginId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PluginsApi.UpsertPluginSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Setting>("/plugins/settings/{plugin_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertPluginSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
