/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CheshireCatApi.Client;
using CheshireCatApi.Model;

namespace CheshireCatApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Setting
        /// </summary>
        /// <remarks>
        /// Create a new setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        Setting CreateSetting(SettingBody settingBody, int operationIndex = 0);

        /// <summary>
        /// Create Setting
        /// </summary>
        /// <remarks>
        /// Create a new setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        ApiResponse<Setting> CreateSettingWithHttpInfo(SettingBody settingBody, int operationIndex = 0);
        /// <summary>
        /// Delete Setting
        /// </summary>
        /// <remarks>
        /// Delete a specific setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteSetting(string settingId, int operationIndex = 0);

        /// <summary>
        /// Delete Setting
        /// </summary>
        /// <remarks>
        /// Delete a specific setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSettingWithHttpInfo(string settingId, int operationIndex = 0);
        /// <summary>
        /// Get Setting
        /// </summary>
        /// <remarks>
        /// Get the a specific setting from the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        Setting GetSetting(string settingId, int operationIndex = 0);

        /// <summary>
        /// Get Setting
        /// </summary>
        /// <remarks>
        /// Get the a specific setting from the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        ApiResponse<Setting> GetSettingWithHttpInfo(string settingId, int operationIndex = 0);
        /// <summary>
        /// Get Settings
        /// </summary>
        /// <remarks>
        /// Get the entire list of settings available in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse GetSettings(string? search = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Settings
        /// </summary>
        /// <remarks>
        /// Get the entire list of settings available in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> GetSettingsWithHttpInfo(string? search = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update Setting
        /// </summary>
        /// <remarks>
        /// Update a specific setting in the database if it exists
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        Setting UpdateSetting(string settingId, SettingBody settingBody, int operationIndex = 0);

        /// <summary>
        /// Update Setting
        /// </summary>
        /// <remarks>
        /// Update a specific setting in the database if it exists
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        ApiResponse<Setting> UpdateSettingWithHttpInfo(string settingId, SettingBody settingBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Setting
        /// </summary>
        /// <remarks>
        /// Create a new setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> CreateSettingAsync(SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Setting
        /// </summary>
        /// <remarks>
        /// Create a new setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> CreateSettingWithHttpInfoAsync(SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Setting
        /// </summary>
        /// <remarks>
        /// Delete a specific setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSettingAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Setting
        /// </summary>
        /// <remarks>
        /// Delete a specific setting in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSettingWithHttpInfoAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Setting
        /// </summary>
        /// <remarks>
        /// Get the a specific setting from the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> GetSettingAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Setting
        /// </summary>
        /// <remarks>
        /// Get the a specific setting from the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> GetSettingWithHttpInfoAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Settings
        /// </summary>
        /// <remarks>
        /// Get the entire list of settings available in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> GetSettingsAsync(string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Settings
        /// </summary>
        /// <remarks>
        /// Get the entire list of settings available in the database
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> GetSettingsWithHttpInfoAsync(string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Setting
        /// </summary>
        /// <remarks>
        /// Update a specific setting in the database if it exists
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> UpdateSettingAsync(string settingId, SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Setting
        /// </summary>
        /// <remarks>
        /// Update a specific setting in the database if it exists
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> UpdateSettingWithHttpInfoAsync(string settingId, SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private CheshireCatApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                new CheshireCatApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(CheshireCatApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(CheshireCatApi.Client.ISynchronousClient client, CheshireCatApi.Client.IAsynchronousClient asyncClient, CheshireCatApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CheshireCatApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CheshireCatApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CheshireCatApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CheshireCatApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Setting Create a new setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        public Setting CreateSetting(SettingBody settingBody, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = CreateSettingWithHttpInfo(settingBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Setting Create a new setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        public CheshireCatApi.Client.ApiResponse<Setting> CreateSettingWithHttpInfo(SettingBody settingBody, int operationIndex = 0)
        {
            // verify the required parameter 'settingBody' is set
            if (settingBody == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingBody' when calling SettingsApi->CreateSetting");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = settingBody;

            localVarRequestOptions.Operation = "SettingsApi.CreateSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Setting>("/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Setting Create a new setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> CreateSettingAsync(SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = await CreateSettingWithHttpInfoAsync(settingBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Setting Create a new setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Setting>> CreateSettingWithHttpInfoAsync(SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingBody' is set
            if (settingBody == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingBody' when calling SettingsApi->CreateSetting");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = settingBody;

            localVarRequestOptions.Operation = "SettingsApi.CreateSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Setting>("/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Setting Delete a specific setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteSetting(string settingId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Object> localVarResponse = DeleteSettingWithHttpInfo(settingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Setting Delete a specific setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public CheshireCatApi.Client.ApiResponse<Object> DeleteSettingWithHttpInfo(string settingId, int operationIndex = 0)
        {
            // verify the required parameter 'settingId' is set
            if (settingId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingId' when calling SettingsApi->DeleteSetting");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("settingId", CheshireCatApi.Client.ClientUtils.ParameterToString(settingId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.DeleteSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/settings/{settingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Setting Delete a specific setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSettingAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Object> localVarResponse = await DeleteSettingWithHttpInfoAsync(settingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Setting Delete a specific setting in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Object>> DeleteSettingWithHttpInfoAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingId' is set
            if (settingId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingId' when calling SettingsApi->DeleteSetting");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("settingId", CheshireCatApi.Client.ClientUtils.ParameterToString(settingId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.DeleteSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/settings/{settingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Setting Get the a specific setting from the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        public Setting GetSetting(string settingId, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = GetSettingWithHttpInfo(settingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Setting Get the a specific setting from the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        public CheshireCatApi.Client.ApiResponse<Setting> GetSettingWithHttpInfo(string settingId, int operationIndex = 0)
        {
            // verify the required parameter 'settingId' is set
            if (settingId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingId' when calling SettingsApi->GetSetting");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("settingId", CheshireCatApi.Client.ClientUtils.ParameterToString(settingId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.GetSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Setting>("/settings/{settingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Setting Get the a specific setting from the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> GetSettingAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = await GetSettingWithHttpInfoAsync(settingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Setting Get the a specific setting from the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Setting>> GetSettingWithHttpInfoAsync(string settingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingId' is set
            if (settingId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingId' when calling SettingsApi->GetSetting");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("settingId", CheshireCatApi.Client.ClientUtils.ParameterToString(settingId)); // path parameter

            localVarRequestOptions.Operation = "SettingsApi.GetSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Setting>("/settings/{settingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Settings Get the entire list of settings available in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse GetSettings(string? search = default(string?), int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<SettingsResponse> localVarResponse = GetSettingsWithHttpInfo(search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Settings Get the entire list of settings available in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public CheshireCatApi.Client.ApiResponse<SettingsResponse> GetSettingsWithHttpInfo(string? search = default(string?), int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "SettingsApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SettingsResponse>("/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Settings Get the entire list of settings available in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> GetSettingsAsync(string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<SettingsResponse> localVarResponse = await GetSettingsWithHttpInfoAsync(search, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Settings Get the entire list of settings available in the database
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">The setting to search (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<SettingsResponse>> GetSettingsWithHttpInfoAsync(string? search = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(CheshireCatApi.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "SettingsApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SettingsResponse>("/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Setting Update a specific setting in the database if it exists
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        public Setting UpdateSetting(string settingId, SettingBody settingBody, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = UpdateSettingWithHttpInfo(settingId, settingBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Setting Update a specific setting in the database if it exists
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        public CheshireCatApi.Client.ApiResponse<Setting> UpdateSettingWithHttpInfo(string settingId, SettingBody settingBody, int operationIndex = 0)
        {
            // verify the required parameter 'settingId' is set
            if (settingId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingId' when calling SettingsApi->UpdateSetting");
            }

            // verify the required parameter 'settingBody' is set
            if (settingBody == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingBody' when calling SettingsApi->UpdateSetting");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("settingId", CheshireCatApi.Client.ClientUtils.ParameterToString(settingId)); // path parameter
            localVarRequestOptions.Data = settingBody;

            localVarRequestOptions.Operation = "SettingsApi.UpdateSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Setting>("/settings/{settingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Setting Update a specific setting in the database if it exists
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> UpdateSettingAsync(string settingId, SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = await UpdateSettingWithHttpInfoAsync(settingId, settingBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Setting Update a specific setting in the database if it exists
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingId"></param>
        /// <param name="settingBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Setting>> UpdateSettingWithHttpInfoAsync(string settingId, SettingBody settingBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingId' is set
            if (settingId == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingId' when calling SettingsApi->UpdateSetting");
            }

            // verify the required parameter 'settingBody' is set
            if (settingBody == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'settingBody' when calling SettingsApi->UpdateSetting");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("settingId", CheshireCatApi.Client.ClientUtils.ParameterToString(settingId)); // path parameter
            localVarRequestOptions.Data = settingBody;

            localVarRequestOptions.Operation = "SettingsApi.UpdateSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Setting>("/settings/{settingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
