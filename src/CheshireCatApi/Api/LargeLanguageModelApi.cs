/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CheshireCatApi.Client;
using CheshireCatApi.Model;

namespace CheshireCatApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILargeLanguageModelApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Llm Settings
        /// </summary>
        /// <remarks>
        /// Get settings and schema of the specified Large Language Model
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        Setting GetLlmSettings(string languageModelName, int operationIndex = 0);

        /// <summary>
        /// Get Llm Settings
        /// </summary>
        /// <remarks>
        /// Get settings and schema of the specified Large Language Model
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        ApiResponse<Setting> GetLlmSettingsWithHttpInfo(string languageModelName, int operationIndex = 0);
        /// <summary>
        /// Get LLMs Settings
        /// </summary>
        /// <remarks>
        /// Get the list of the Large Language Models
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse GetLlmsSettings(int operationIndex = 0);

        /// <summary>
        /// Get LLMs Settings
        /// </summary>
        /// <remarks>
        /// Get the list of the Large Language Models
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> GetLlmsSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Upsert LLM Setting
        /// </summary>
        /// <remarks>
        /// Upsert the Large Language Model setting
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        Setting UpsertLlmSetting(string languageModelName, Object body, int operationIndex = 0);

        /// <summary>
        /// Upsert LLM Setting
        /// </summary>
        /// <remarks>
        /// Upsert the Large Language Model setting
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        ApiResponse<Setting> UpsertLlmSettingWithHttpInfo(string languageModelName, Object body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILargeLanguageModelApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Llm Settings
        /// </summary>
        /// <remarks>
        /// Get settings and schema of the specified Large Language Model
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> GetLlmSettingsAsync(string languageModelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Llm Settings
        /// </summary>
        /// <remarks>
        /// Get settings and schema of the specified Large Language Model
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> GetLlmSettingsWithHttpInfoAsync(string languageModelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get LLMs Settings
        /// </summary>
        /// <remarks>
        /// Get the list of the Large Language Models
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> GetLlmsSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get LLMs Settings
        /// </summary>
        /// <remarks>
        /// Get the list of the Large Language Models
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> GetLlmsSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upsert LLM Setting
        /// </summary>
        /// <remarks>
        /// Upsert the Large Language Model setting
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> UpsertLlmSettingAsync(string languageModelName, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upsert LLM Setting
        /// </summary>
        /// <remarks>
        /// Upsert the Large Language Model setting
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> UpsertLlmSettingWithHttpInfoAsync(string languageModelName, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILargeLanguageModelApi : ILargeLanguageModelApiSync, ILargeLanguageModelApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LargeLanguageModelApi : ILargeLanguageModelApi
    {
        private CheshireCatApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LargeLanguageModelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LargeLanguageModelApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LargeLanguageModelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LargeLanguageModelApi(string basePath)
        {
            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                new CheshireCatApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LargeLanguageModelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LargeLanguageModelApi(CheshireCatApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LargeLanguageModelApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LargeLanguageModelApi(CheshireCatApi.Client.ISynchronousClient client, CheshireCatApi.Client.IAsynchronousClient asyncClient, CheshireCatApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CheshireCatApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CheshireCatApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CheshireCatApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CheshireCatApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Llm Settings Get settings and schema of the specified Large Language Model
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        public Setting GetLlmSettings(string languageModelName, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = GetLlmSettingsWithHttpInfo(languageModelName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Llm Settings Get settings and schema of the specified Large Language Model
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        public CheshireCatApi.Client.ApiResponse<Setting> GetLlmSettingsWithHttpInfo(string languageModelName, int operationIndex = 0)
        {
            // verify the required parameter 'languageModelName' is set
            if (languageModelName == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'languageModelName' when calling LargeLanguageModelApi->GetLlmSettings");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("languageModelName", CheshireCatApi.Client.ClientUtils.ParameterToString(languageModelName)); // path parameter

            localVarRequestOptions.Operation = "LargeLanguageModelApi.GetLlmSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Setting>("/llm/settings/{languageModelName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLlmSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Llm Settings Get settings and schema of the specified Large Language Model
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> GetLlmSettingsAsync(string languageModelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = await GetLlmSettingsWithHttpInfoAsync(languageModelName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Llm Settings Get settings and schema of the specified Large Language Model
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Setting>> GetLlmSettingsWithHttpInfoAsync(string languageModelName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'languageModelName' is set
            if (languageModelName == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'languageModelName' when calling LargeLanguageModelApi->GetLlmSettings");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("languageModelName", CheshireCatApi.Client.ClientUtils.ParameterToString(languageModelName)); // path parameter

            localVarRequestOptions.Operation = "LargeLanguageModelApi.GetLlmSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Setting>("/llm/settings/{languageModelName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLlmSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get LLMs Settings Get the list of the Large Language Models
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse GetLlmsSettings(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<SettingsResponse> localVarResponse = GetLlmsSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get LLMs Settings Get the list of the Large Language Models
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public CheshireCatApi.Client.ApiResponse<SettingsResponse> GetLlmsSettingsWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LargeLanguageModelApi.GetLlmsSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SettingsResponse>("/llm/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLlmsSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get LLMs Settings Get the list of the Large Language Models
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> GetLlmsSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<SettingsResponse> localVarResponse = await GetLlmsSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get LLMs Settings Get the list of the Large Language Models
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<SettingsResponse>> GetLlmsSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LargeLanguageModelApi.GetLlmsSettings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SettingsResponse>("/llm/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLlmsSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert LLM Setting Upsert the Large Language Model setting
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Setting</returns>
        public Setting UpsertLlmSetting(string languageModelName, Object body, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = UpsertLlmSettingWithHttpInfo(languageModelName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert LLM Setting Upsert the Large Language Model setting
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Setting</returns>
        public CheshireCatApi.Client.ApiResponse<Setting> UpsertLlmSettingWithHttpInfo(string languageModelName, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'languageModelName' is set
            if (languageModelName == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'languageModelName' when calling LargeLanguageModelApi->UpsertLlmSetting");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'body' when calling LargeLanguageModelApi->UpsertLlmSetting");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("languageModelName", CheshireCatApi.Client.ClientUtils.ParameterToString(languageModelName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LargeLanguageModelApi.UpsertLlmSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Setting>("/llm/settings/{languageModelName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertLlmSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert LLM Setting Upsert the Large Language Model setting
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> UpsertLlmSettingAsync(string languageModelName, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Setting> localVarResponse = await UpsertLlmSettingWithHttpInfoAsync(languageModelName, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert LLM Setting Upsert the Large Language Model setting
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageModelName"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Setting>> UpsertLlmSettingWithHttpInfoAsync(string languageModelName, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'languageModelName' is set
            if (languageModelName == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'languageModelName' when calling LargeLanguageModelApi->UpsertLlmSetting");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'body' when calling LargeLanguageModelApi->UpsertLlmSetting");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("languageModelName", CheshireCatApi.Client.ClientUtils.ParameterToString(languageModelName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LargeLanguageModelApi.UpsertLlmSetting";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Setting>("/llm/settings/{languageModelName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertLlmSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
