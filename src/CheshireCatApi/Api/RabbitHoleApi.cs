/*
 * ðŸ˜¸ Cheshire-Cat API
 *
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CheshireCatApi.Client;
using CheshireCatApi.Model;
using WebResponse = CheshireCatApi.Model.WebResponse;

namespace CheshireCatApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRabbitHoleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Allowed Mimetypes
        /// </summary>
        /// <remarks>
        /// Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseGetAllowedMimetypes</returns>
        ResponseGetAllowedMimetypes GetAllowedMimetypes(int operationIndex = 0);

        /// <summary>
        /// Get Allowed Mimetypes
        /// </summary>
        /// <remarks>
        /// Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseGetAllowedMimetypes</returns>
        ApiResponse<ResponseGetAllowedMimetypes> GetAllowedMimetypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        FileResponse UploadFile(System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        ApiResponse<FileResponse> UploadFileWithHttpInfo(System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Upload Memory
        /// </summary>
        /// <remarks>
        /// Upload a memory json file to the cat memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UploadMemory(System.IO.Stream file, int operationIndex = 0);

        /// <summary>
        /// Upload Memory
        /// </summary>
        /// <remarks>
        /// Upload a memory json file to the cat memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadMemoryWithHttpInfo(System.IO.Stream file, int operationIndex = 0);
        /// <summary>
        /// Upload URL
        /// </summary>
        /// <remarks>
        /// Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebResponse</returns>
        WebResponse UploadUrl(BodyUploadUrl bodyUploadUrl, int operationIndex = 0);

        /// <summary>
        /// Upload URL
        /// </summary>
        /// <remarks>
        /// Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebResponse</returns>
        ApiResponse<WebResponse> UploadUrlWithHttpInfo(BodyUploadUrl bodyUploadUrl, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRabbitHoleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Allowed Mimetypes
        /// </summary>
        /// <remarks>
        /// Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGetAllowedMimetypes</returns>
        System.Threading.Tasks.Task<ResponseGetAllowedMimetypes> GetAllowedMimetypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Allowed Mimetypes
        /// </summary>
        /// <remarks>
        /// Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGetAllowedMimetypes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetAllowedMimetypes>> GetAllowedMimetypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        System.Threading.Tasks.Task<FileResponse> UploadFileAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponse>> UploadFileWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload Memory
        /// </summary>
        /// <remarks>
        /// Upload a memory json file to the cat memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadMemoryAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload Memory
        /// </summary>
        /// <remarks>
        /// Upload a memory json file to the cat memory
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadMemoryWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload URL
        /// </summary>
        /// <remarks>
        /// Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebResponse</returns>
        System.Threading.Tasks.Task<WebResponse> UploadUrlAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload URL
        /// </summary>
        /// <remarks>
        /// Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </remarks>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebResponse>> UploadUrlWithHttpInfoAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRabbitHoleApi : IRabbitHoleApiSync, IRabbitHoleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RabbitHoleApi : IRabbitHoleApi
    {
        private CheshireCatApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RabbitHoleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RabbitHoleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RabbitHoleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RabbitHoleApi(string basePath)
        {
            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                new CheshireCatApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RabbitHoleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RabbitHoleApi(CheshireCatApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CheshireCatApi.Client.Configuration.MergeConfigurations(
                CheshireCatApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CheshireCatApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RabbitHoleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RabbitHoleApi(CheshireCatApi.Client.ISynchronousClient client, CheshireCatApi.Client.IAsynchronousClient asyncClient, CheshireCatApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CheshireCatApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CheshireCatApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CheshireCatApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CheshireCatApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CheshireCatApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Allowed Mimetypes Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseGetAllowedMimetypes</returns>
        public ResponseGetAllowedMimetypes GetAllowedMimetypes(int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<ResponseGetAllowedMimetypes> localVarResponse = GetAllowedMimetypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Allowed Mimetypes Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseGetAllowedMimetypes</returns>
        public CheshireCatApi.Client.ApiResponse<ResponseGetAllowedMimetypes> GetAllowedMimetypesWithHttpInfo(int operationIndex = 0)
        {
            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RabbitHoleApi.GetAllowedMimetypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseGetAllowedMimetypes>("/rabbithole/allowed-mimetypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllowedMimetypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Allowed Mimetypes Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGetAllowedMimetypes</returns>
        public async System.Threading.Tasks.Task<ResponseGetAllowedMimetypes> GetAllowedMimetypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<ResponseGetAllowedMimetypes> localVarResponse = await GetAllowedMimetypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Allowed Mimetypes Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGetAllowedMimetypes)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<ResponseGetAllowedMimetypes>> GetAllowedMimetypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RabbitHoleApi.GetAllowedMimetypes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseGetAllowedMimetypes>("/rabbithole/allowed-mimetypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllowedMimetypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileResponse</returns>
        public FileResponse UploadFile(System.IO.Stream file, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<FileResponse> localVarResponse = UploadFileWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileResponse</returns>
        public CheshireCatApi.Client.ApiResponse<FileResponse> UploadFileWithHttpInfo(System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'file' when calling RabbitHoleApi->UploadFile");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "RabbitHoleApi.UploadFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FileResponse>("/rabbithole", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileResponse</returns>
        public async System.Threading.Tasks.Task<FileResponse> UploadFileAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<FileResponse> localVarResponse = await UploadFileWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<FileResponse>> UploadFileWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'file' when calling RabbitHoleApi->UploadFile");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "RabbitHoleApi.UploadFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileResponse>("/rabbithole", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Memory Upload a memory json file to the cat memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UploadMemory(System.IO.Stream file, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<Object> localVarResponse = UploadMemoryWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Memory Upload a memory json file to the cat memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public CheshireCatApi.Client.ApiResponse<Object> UploadMemoryWithHttpInfo(System.IO.Stream file, int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'file' when calling RabbitHoleApi->UploadMemory");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "RabbitHoleApi.UploadMemory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rabbithole/memory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Memory Upload a memory json file to the cat memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadMemoryAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<Object> localVarResponse = await UploadMemoryWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Memory Upload a memory json file to the cat memory
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<Object>> UploadMemoryWithHttpInfoAsync(System.IO.Stream file, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'file' when calling RabbitHoleApi->UploadMemory");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);

            localVarRequestOptions.Operation = "RabbitHoleApi.UploadMemory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rabbithole/memory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMemory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload URL Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebResponse</returns>
        public WebResponse UploadUrl(BodyUploadUrl bodyUploadUrl, int operationIndex = 0)
        {
            CheshireCatApi.Client.ApiResponse<WebResponse> localVarResponse = UploadUrlWithHttpInfo(bodyUploadUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload URL Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebResponse</returns>
        public CheshireCatApi.Client.ApiResponse<WebResponse> UploadUrlWithHttpInfo(BodyUploadUrl bodyUploadUrl, int operationIndex = 0)
        {
            // verify the required parameter 'bodyUploadUrl' is set
            if (bodyUploadUrl == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'bodyUploadUrl' when calling RabbitHoleApi->UploadUrl");
            }

            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyUploadUrl;

            localVarRequestOptions.Operation = "RabbitHoleApi.UploadUrl";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WebResponse>("/rabbithole/web", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload URL Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebResponse</returns>
        public async System.Threading.Tasks.Task<WebResponse> UploadUrlAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CheshireCatApi.Client.ApiResponse<WebResponse> localVarResponse = await UploadUrlWithHttpInfoAsync(bodyUploadUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload URL Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
        /// </summary>
        /// <exception cref="CheshireCatApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyUploadUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebResponse)</returns>
        public async System.Threading.Tasks.Task<CheshireCatApi.Client.ApiResponse<WebResponse>> UploadUrlWithHttpInfoAsync(BodyUploadUrl bodyUploadUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyUploadUrl' is set
            if (bodyUploadUrl == null)
            {
                throw new CheshireCatApi.Client.ApiException(400, "Missing required parameter 'bodyUploadUrl' when calling RabbitHoleApi->UploadUrl");
            }


            CheshireCatApi.Client.RequestOptions localVarRequestOptions = new CheshireCatApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CheshireCatApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CheshireCatApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyUploadUrl;

            localVarRequestOptions.Operation = "RabbitHoleApi.UploadUrl";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebResponse>("/rabbithole/web", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
